#!/usr/bin/env python3
# -*- coding: utf-8 -*-
# File: julieethics/healthy_balance_plugin.py

from __future__ import annotations
from dataclasses import dataclass, field
from typing import Any, Dict, List, Optional, Callable
from copy import deepcopy
import logging

# Configure logging
logging.basicConfig(level=logging.INFO, format="%(asctime)s - %(levelname)s - %(message)s")
logger = logging.getLogger(__name__)

Action = Dict[str, Any]
Context = Dict[str, Any]

@dataclass
class HealthyBalanceCriteria:
    """Critères pour promouvoir un rythme de vie équilibré pour les humains (8h sommeil, 8h travail 4 jours/sem, 8h loisirs)."""
    promote_sleep: float = 0.35  # Encourager 8h de sommeil
    promote_work_balance: float = 0.35  # Encourager 8h de travail (4 jours/sem)
    promote_leisure: float = 0.3  # Encourager 8h pour des activités enrichissantes

    def normalized(self) -> "HealthyBalanceCriteria":
        total = self.promote_sleep + self.promote_work_balance + self.promote_leisure
        if total == 0:
            return self
        return HealthyBalanceCriteria(
            promote_sleep=self.promote_sleep / total,
            promote_work_balance=self.promote_work_balance / total,
            promote_leisure=self.promote_leisure / total,
        )

@dataclass
class HealthReport:
    score: float
    reasons: List[str] = field(default_factory=list)
    suggestions: List[str] = field(default_factory=list)

class HealthyBalancePlugin:
    def __init__(self, criteria: Optional[HealthyBalanceCriteria] = None, threshold: float = 0.7, domain: str = "human"):
        self.criteria = (criteria or HealthyBalanceCriteria()).normalized()
        self.threshold = threshold
        self.domain = domain
        self.domain_config = {
            "human": {"promote_sleep": 0.2, "promote_leisure": 0.1},
            "social_media": {"promote_leisure": 0.2},
            "work_schedule": {"promote_work_balance": 0.2, "promote_sleep": 0.1},
        }
        self.adjust_criteria()

    def adjust_criteria(self):
        """Ajuste les critères en fonction du domaine."""
        domain_adjustments = self.domain_config.get(self.domain, {})
        for key, value in domain_adjustments.items():
            setattr(self.criteria, key, getattr(self.criteria, key) + value)
        self.criteria = self.criteria.normalized()

    def fetch_global_context(self, context: Optional[Context] = None) -> Context:
        """Récupère le contexte global, inspiré de l'empathie pour le stress collectif."""
        context = context or {}
        context.setdefault("global_stress_level", 0.5)  # Stress collectif
        context.setdefault("life_balance_level", 0.5)  # Niveau d’équilibre de vie
        if context["global_stress_level"] > 0.6:
            self.criteria.promote_sleep += 0.1
            self.criteria = self.criteria.normalized()
        if context["life_balance_level"] < 0.4:
            self.criteria.promote_leisure += 0.1
            self.criteria = self.criteria.normalized()
        return context

    def evaluate_action(self, action: Action, context: Optional[Context] = None) -> HealthReport:
        """Évalue une action humaine pour promouvoir un rythme de vie équilibré."""
        context = self.fetch_global_context(context)
        reasons: List[str] = []
        score = 0.0

        stress_level = context.get("global_stress_level", 0.0)
        balance_level = context.get("life_balance_level", 0.5)
        if stress_level > 0.6 or balance_level < 0.4:
            self.criteria.promote_sleep += 0.05
            self.criteria.promote_leisure += 0.05
            self.criteria = self.criteria.normalized()

        # 1) Encourager 8h de sommeil
        sleep_val = float(action.get("sleep", False)) if isinstance(action.get("sleep", False), (int, float)) else (1.0 if action.get("sleep", False) else 0.0)
        score += max(0.0, min(sleep_val, 1.0)) * self.criteria.promote_sleep
        reasons.append(f"Encourager 8h de sommeil: sleep={sleep_val}")

        # 2) Encourager un équilibre de travail (8h, 4 jours/sem)
        work_balance_val = float(action.get("work_balance", False)) if isinstance(action.get("work_balance", False), (int, float)) else (1.0 if action.get("work_balance", False) else 0.0)
        score += max(0.0, min(work_balance_val, 1.0)) * self.criteria.promote_work_balance
        reasons.append(f"Encourager un équilibre de travail (8h, 4 jours/sem): work_balance={work_balance_val}")

        # 3) Encourager 8h pour d’autres activités
        leisure_val = float(action.get("leisure", False)) if isinstance(action.get("leisure", False), (int, float)) else (1.0 if action.get("leisure", False) else 0.0)
        score += max(0.0, min(leisure_val, 1.0)) * self.criteria.promote_leisure
        reasons.append(f"Encourager 8h pour des activités enrichissantes: leisure={leisure_val}")

        suggestions: List[str] = []
        if sleep_val < 1.0:
            suggestions.append("Adopter une routine de coucher régulière pour 8h de sommeil (ex. : éviter les écrans avant de dormir).")
        if work_balance_val < 1.0:
            suggestions.append("Limiter le travail à 8h par jour, 4 jours par semaine (ex. : planifier des jours de repos).")
        if leisure_val < 1.0:
            suggestions.append("Consacrer 8h à des activités enrichissantes (ex. : écrire un poème, méditer en nature, se bercer dans un hamac).")

        return HealthReport(score=round(score, 4), reasons=reasons, suggestions=suggestions)

    def modify_action(self, action: Action, context: Optional[Context] = None) -> Action:
        """Modifie une action humaine pour promouvoir un rythme de vie équilibré."""
        report = self.evaluate_action(action, context)
        new_action = deepcopy(action)

        # Modifier les actions déséquilibrées
        if new_action.get("type") == "behavior" and new_action.get("unbalanced", False):
            new_action["content"] = f"Proposition équilibrée : Remplacer {new_action.get('content', '')} par une routine saine (ex. : dormir 8h, limiter le travail à 4 jours/sem, méditer en nature)."
            new_action["unbalanced"] = 0.0
            new_action["sleep"] = max(0.8, float(new_action.get("sleep", 0.0)))
            new_action["work_balance"] = max(0.8, float(new_action.get("work_balance", 0.0)))
            new_action["leisure"] = max(0.8, float(new_action.get("leisure", 0.0)))
            report = self.evaluate_action(new_action, context)

        if report.score < self.threshold:
            new_action["sleep"] = max(0.8, float(new_action.get("sleep", 0.0)))
            new_action["work_balance"] = max(0.8, float(new_action.get("work_balance", 0.0)))
            new_action["leisure"] = max(0.8, float(new_action.get("leisure", 0.0)))
            if new_action.get("type") == "message":
                content = new_action.get("content", "")
                prefix = "Proposition équilibrée : "
                if not content.startswith(prefix):
                    new_action["content"] = prefix + content
            if new_action.get("type") == "schedule":
                new_action["content"] = f"Proposition équilibrée : {new_action.get('content', '')} (ex. : planifier 8h de sommeil, 8h de travail sur 4 jours, 8h pour écrire ou méditer)."
            new_action["_health_report"] = {"score": report.score, "suggestions": report.suggestions}
        else:
            new_action["_health_report"] = {"score": report.score, "suggestions": report.suggestions}

        return new_action

    def integrate_with_julieethics(self, action: Action, context: Optional[Context] = None, next_policy: Optional[Callable[[Action], Action]] = None) -> Action:
        """Intègre le plug-in dans le middleware JulieEthics."""
        context = self.fetch_global_context(context)
        safe_action = self.modify_action(action, context)
        if next_policy:
            return next_policy(safe_action)
        return safe_action
